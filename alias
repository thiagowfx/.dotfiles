# This function sets an environment variable iff its correlated program
# is installed and/or if a given file exists on the system.
#
# Arguments:
#  $1: the environment variable (e.g. EDITOR)
#  $2: its value
#  $3: a program (e.g. vim or /usr/bin/vim)
#  $4: a file (e.g. $HOME/directory)
#
addenv() {
    [[ "x$3" != "x" ]] && ! command -v "$3" &>/dev/null && return
    [[ "x$4" != "x" ]] && [ ! -e "$4" ] && return
    export "$1"="$2"
}

# This function creates an alias iff the specified program and/or a given file
# exists on the system.
#
# Arguments:
#  $1: the alias
#  $2: its value
#  $3: a program (e.g. vim or /usr/bin/vim)
#  $4: a file (e.g. $HOME/directory)
#
addalias() {
  [[ "x$3" != "x" ]] && ! command -v "$3" &>/dev/null && return
  [[ "x$4" != "x" ]] && [ ! -e "$4" ] && return
  alias "$1"="$2"
}

# Templates are functions/snippets for general use.
# They are aliased preceded with "t-".
#
# The first argument should be a function defined internally, preceded with _.
#
# A program can be optionally specified as second argument; if it is not found
# in the PATH, then the template won't be defined.
#
# Similarly, you can specify a file as third argument. If the file is not found,
# then the template won't be defined either.
#
# Arguments:
#  $1: template name
#  $2: a program (e.g. vim or /usr/bin/vim)
#  $3: a file (e.g. /boot/grub/grub.cfg)
#
addtemplate() {
  [[ "x$2" != "x" ]] && ! command -v "$2" &>/dev/null && return
  [[ "x$3" != "x" ]] && [ ! -e "$3" ] && return
  alias "t-$1"="_$1"
}

for f in .alias.d/*
do
	source $f
done
