" Vim config file
"
" Reload vimrc:
"   :so %
"   :so $MYVIMRC
"
" Idempotent vim reload:
"   if has('vim_starting') ...
"
" Open vim without vimrc:
"   $ vim -u NONE
"   $ vim --clean
"
" List all keybind mappings:
"   :map, :nmap, :vmap, :imap
"   :verbose <map>
"
" Open command history:
"   :<C-f>

" Load vim defaults.
" :h skip_defaults_vim
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim

" Set leader key. Default is '\'.
let mapleader=","

" Browse manual pages within vim.
"   :Man man
runtime! ftplugin/man.vim

" Better %
runtime! macros/matchit.vim

" Set color theme / scheme
packadd! onedark
packadd! catppuccin
colorscheme catppuccin
highlight ColorColumn ctermbg=magenta

" The colorscheme of lightline is independent of the editor colorscheme.
"   'one' provides sensible defaults and works in 8-color mode (linux tty).
"   'onedark' provides its own colorscheme.
let g:lightline = {'colorscheme': 'onedark'}

" :w save misspellings
command! GWQ Gwq
command! W w
command! WQ wq
command! Wq wq

" a la emacs just-one-space
inoremap <Esc><Space> <Esc>ciw<Space>
nnoremap <Esc><Space> ciw<Space><Esc>

" https://vi.stackexchange.com/questions/439/how-to-join-lines-without-producing-a-space
nnoremap J gJ

" Reflow current paragraph
nnoremap <silent> Q gwip

" Remove all trailing whitespace
nnoremap <leader>t :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" a la emacs just-one-space
function! JustOneSpace()
  let l:line = getline('.')
  let l:col = col('.')

  " Find start of whitespace sequence
  let l:start = l:col
  while l:start > 1 && l:line[l:start-2] =~ '\s'
    let l:start = l:start - 1
  endwhile

  " Find end of whitespace sequence
  let l:end = l:col
  while l:end <= len(l:line) && l:line[l:end-1] =~ '\s'
    let l:end = l:end + 1
  endwhile

  " Only proceed if we're in a whitespace sequence with more than 1 space
  if l:end - l:start > 1
    " Replace the whitespace sequence with a single space
    let l:newline = l:line[0:l:start-2] . ' ' . l:line[l:end-1:]
    call setline('.', l:newline)
    " Position cursor right after the single space
    call cursor('.', l:start + 1)
  endif
endfunction
nnoremap <leader><Space> :call JustOneSpace()<CR>

" Always use vertical diff splits.
set diffopt+=vertical

" Highlight search pattern matches.
"   :noh dismisses all highlights
set hlsearch
" double tap esc to unset highlighting
nnoremap <Esc><Esc> :noh<CR>

" https://stackoverflow.com/a/2288438/1745064
set ignorecase smartcase

" Do not redraw the screen while executing macros.
"   :redraw to force
set lazyredraw

" Display whitespace characters, including tabs.
" https://vi.stackexchange.com/q/422/8211
set list lcs=tab:\|\ ,trail:·,nbsp:·

" https://vim.fandom.com/wiki/Modeline_magic
set modeline

" Disable horizontal cursor line as it is very slow over ssh.
" https://stackoverflow.com/q/307148/1745064
set nocursorline

" Disable fold.
set nofoldenable

" Use one space, not two, after punctuation.
set nojoinspaces

" Disable --INSERT-- which is not necessary, because:
"   Cursor shape changes thanks to wincent/terminus.
"   itchyny/lightline.vim already displays it.
set noshowmode

" Disable backups and swapfile, use persistent undo instead.
set noswapfile nowritebackup

" Show line numbers.
set number

" Simplify some display messages.
set shortmess=atI

" Display indicators for lines that have been wrapped.
let &showbreak = '> '

" Show matching brackets, briefly jump to the matched one.
set showmatch

" Smart autoindent when starting a new line.
set smartindent

" Spell-checking
" set spell
" set spelllang=de_de,en_ca,en_us,pt_br

" Better splits.
set splitbelow splitright switchbuf=useopen

" Enable persistent undo.
if has('persistent_undo')
  set undofile undodir=~/.cache/vim/undo
  call mkdir(&undodir, "p", 0700)
endif

" Shorter update time than the 4000ms default, for async vim operations.
set updatetime=2000

" Faster mode switching
set timeoutlen=500
set ttimeoutlen=10

" Set visual bell. The audio bell is very annoying, so make it do nothing.
" https://unix.stackexchange.com/a/5313
set visualbell t_vb=

" Set completion mode.
set wildmode=list:longest

" https://github.com/dense-analysis/ale#generating-vim-help-files
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
