" Vim config file
"
" Reload vimrc:
"   :so %
"   :so $MYVIMRC
"
" Idempotent vim reload:
"   if has('vim_starting') ...
"
" Open vim without vimrc:
"   $ vim -u NONE
"   $ vim --clean
"
" List all keybind mappings:
"   :map, :nmap, :vmap, :imap
"   :verbose <map>
"
" Open command history:
"   :<C-f>

" Load vim defaults.
" :h skip_defaults_vim
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim

" Set leader key. Default is '\'.
let mapleader=","

" Initialize plugin manager: vim-plug
call plug#begin('~/.vim/plugged')

" Better defaults
Plug 'tpope/vim-sensible'

" Automatically follow symlinks, helpful for ~/.dotfiles
"   vim-bbye: optional dependency to consistenly wipe buffers without impacting the windows order
Plug 'moll/vim-bbye'
Plug 'aymericbeaumet/vim-symlink'

" Miscellaneous features:
"   Cursor shape change in insert and replace mode
"   Improved mouse support
"   Focus reporting: plays well with tmux and terminal
"   Bracketed paste: automatically handles :set paste
Plug 'wincent/terminus'

" Highlight trailing whitespace.
"
" Fix all occurrences:
"   :FixWhitespace
Plug 'bronson/vim-trailing-whitespace'

" Color theme / scheme
Plug 'crusoexia/vim-monokai' " monokai
Plug 'joshdick/onedark.vim'  " onedark

" Minimalist statusline / tabline.
Plug 'itchyny/lightline.vim'

" The colorscheme of lightline is independent of the editor colorscheme.
"   'one' provides sensible defaults and works in 8-color mode (linux tty).
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ }

" Display thin vertical lines at each indentation level for code indented with spaces.
"   :IndentLinesToggle
Plug 'Yggdroot/indentLine'
" augroup indent_line
"   autocmd!
"   autocmd FileType man call let g:indentLine_enabled=0
" augroup END

" Async VCS info: git, hg, etc
Plug 'mhinz/vim-signify'

" Git wrapper
Plug 'tpope/vim-fugitive'
command! Gadd Gwrite
command! Gdiff Gdiffsplit
command! GDiff Gdiffsplit

" A better vimdiff mergetool: 2-way diff.
"   ~/.gitconfig and ~/.hgrc are set up to use this plugin.
"   :DiffConflicts
"   do for diffobtain (get), dp for diffput, [c and ]c to navigate diff hunks
Plug 'whiteinge/diffconflicts', {'on': 'DiffConflicts'}

" Single-line <-> multi-line statements.
"   gS to split
"   gJ to join
Plug 'AndrewRadev/splitjoin.vim'

" Toggle comment blocks.
"   gc to comment out in visual mode or the target of a motion
"   gcc to comment out the current line
"   gcgc to uncomment a set of adjacent lines
Plug 'tpope/vim-commentary'

" Automatically adds `end`, `fi`, etc.
Plug 'tpope/vim-endwise'

" Helpers for unix
Plug 'tpope/vim-eunuch'

" https://superuser.com/a/785016/165044
command! DoasWrite execute 'silent! write !doas tee % >/dev/null' <bar> edit!

" Automatically create any non-existent directories before writing the buffer.
Plug 'pbrisbin/vim-mkdir'

" Smarter '.' repeat
Plug 'tpope/vim-repeat'

" Heuristically infers tabs and spaces settings, so that there's no need to
" specify them in ~/.vimrc.
Plug 'tpope/vim-sleuth'

" Native vim:
"   di"  delete inside "quotes"
"   da"  delete around "quotes"
"   dip  delete inside paragraph
"   dit  delete inside HTML tag
"
" Vim surround:
"   ysiw"  insert quotes around word
"   cs'"   replace single quotes with double quotes
Plug 'tpope/vim-surround'

" Complimentary pairs of mappings.
"   ]n and [n to jump between SCM conflict markers.
Plug 'tpope/vim-unimpaired'

" Improved file manager.
"   Activate with '-' (hyphen) key.
Plug 'tpope/vim-vinegar'

" Comment alignment plugin.
"   :EasyAlign <delimiter>
"   v for visual selection mode, then :EasyAlign #
Plug 'junegunn/vim-easy-align', {'on': 'EasyAlign'}

" fzf for vim.
Plug 'junegunn/fzf.vim', {'on': 'FZF'}
command! Fzf FZF

" Miscellaneous features:
"   Automatically clears search highlight when cursor is moved
"   Improved star-search (visual-mode, highlighting without moving)
Plug 'junegunn/vim-slash'

" OSC52 integration for system clipboard.
"   C-c to copy to system clipboard.
"   gv preserves selection
Plug 'ojroques/vim-oscyank'
vnoremap <C-c> :OSCYank<CR>gv

" Make the yanked region apparent
Plug 'machakann/vim-highlightedyank'

" Open file.ext:line:col at the appropriate line and column.
Plug 'wsdjeg/vim-fetch'

" Preview colours in source code while editing.
Plug 'ap/vim-css-color'

" ALE: Asynchronous Lint Engine:
"   Syntax checking and semantic errors
"   Language Server Protocol (LSP) client
"   :ALEFix to apply linter fixes
"   :ALEInfo to debug/troubleshoot
Plug 'dense-analysis/ale'
let g:ale_fixers = {
      \    'python': ['autopep8'],
      \}
let g:ale_fix_on_save = 1

" Distraction-free writing, good for blogging.
" Make Vim as powerful a tool for writers.
Plug 'junegunn/goyo.vim'
Plug 'amix/vim-zenroom2'
Plug 'reedes/vim-pencil'
Plug 'junegunn/limelight.vim'
Plug 'reedes/vim-colors-pencil'
Plug 'subnut/vim-iawriter'
nnoremap <leader>g :Goyo <bar> SoftPencil <bar> Iawriter<CR>
let g:iawriter_force_defaults = 1

augroup vim_pencil
  autocmd!
  autocmd FileType markdown call pencil#init({'wrap': 'soft', 'autoformat': 1})
augroup END

" built-in markdown: https://github.com/tpope/vim-markdown
let g:markdown_syntax_conceal = 0

" https://vimtricks.com/p/highlight-syntax-inside-markdown/
let g:markdown_fenced_languages = ['python']

" Format current paragraph
nnoremap <silent> Q gqap

call plug#end()

" Better %
runtime! macros/matchit.vim

" Browse manual pages within vim.
"   :Man man
source $VIMRUNTIME/ftplugin/man.vim

" Set color theme / scheme
" colorscheme monokai
colorscheme onedark
highlight ColorColumn ctermbg=magenta

" :w save misspellings
command! W w
command! WQ wq
command! Wq wq

" double tap esc to unset highlighting
nnoremap <Esc><Esc> :noh<CR>

" a la emacs just-one-space
inoremap <Esc><Space> <Esc>ciw<Space>
nnoremap <Esc><Space> ciw<Space><Esc>

" Disable horizontal cursor line as it is very slow over ssh.
" https://stackoverflow.com/q/307148/1745064
set nocursorline

" Always use vertical diff splits.
set diffopt+=vertical

" Disable fold.
set nofoldenable

" Highlight search pattern matches.
"   :noh dismisses all highlights
set hlsearch

" https://stackoverflow.com/a/2288438/1745064
set ignorecase smartcase

" Use one space, not two, after punctuation.
set nojoinspaces

" Do not redraw the screen while executing macros.
"   :redraw to force
set lazyredraw

" Display whitespace characters, including tabs.
" https://vi.stackexchange.com/q/422/8211
set list lcs=tab:\|\ ,trail:·,nbsp:·

" Disable --INSERT-- which is not necessary, because:
"   Cursor shape changes thanks to wincent/terminus.
"   itchyny/lightline.vim already displays it.
set noshowmode

" Disable backups and swapfile, use persistent undo instead.
set noswapfile nowritebackup

" Show line numbers.
set number

" Simplify some display messages.
set shortmess=atI

" Display indicators for lines that have been wrapped.
let &showbreak = '> '

" Show matching brackets, briefly jump to the matched one.
set showmatch

" Smart autoindent when starting a new line.
set smartindent

" Better splits.
set splitbelow splitright switchbuf=useopen

" Shorter update time than the 4000ms default, for async vim operations.
set updatetime=2000

" Enable persistent undo.
if has('persistent_undo')
  set undofile undodir=~/.cache/vim/undo
  call mkdir(&undodir, "p", 0700)
endif

" Set completion mode.
set wildmode=list:longest

" https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
augroup vcs_commit_message
  autocmd!
  autocmd Filetype gitcommit,hgcommit setlocal spell textwidth=72 cc=+1
augroup end

" Load corp configs if any.
if filereadable($HOME . "/.vim/vimrc_corp")
  source ~/.vim/vimrc_corp
endif
