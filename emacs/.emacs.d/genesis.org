#+TITLE: thiagowfx's emacs configuration

* Base: Package Management
** straight.el
=straight.el= is a package manager for emacs:

Upstream URL: https://github.com/raxod502/straight.el

Bootstrap =straight.el=:

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** use-package

=use-package= helps getting and configuring emacs packages:

Upstream URL: https://github.com/jwiegley/use-package

Activate =straight.el= =use-package= integration:

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)
#+END_SRC
** exec-path-from-shell
=exec-path-from-shell= ensures that environment variables inside emacs look the same as in the user's shell:

#+BEGIN_SRC
(use-package exec-path-from-shell
  :config (when (memq window-system '(mac ns x))
            (exec-path-from-shell-initialize)))
#+END_SRC
* Packages
** better-defaults

=better-defaults= provides better defaults to emacs:

#+BEGIN_SRC emacs-lisp
(use-package better-defaults)
#+END_SRC
** monokai-theme
=monokai-theme= is the monokai theme for emacs:

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme)
#+END_SRC
** winner-mode
=winner-mode= lets the user easily move through window layouts:

Keybindings:

- =C-c left=
- =C-c right=

#+BEGIN_SRC emacs-lisp
(use-package winner
  :config (winner-mode t))
#+END_SRC

** evil-mode
=evil-mode= is an extensible vi layer for emacs:

#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode t)
  (setq evil-default-state 'emacs))
#+END_SRC
** evil-goggles
=evil-goggles= displays a visual hint when editing with =evil=:

#+BEGIN_SRC emacs-lisp
(use-package evil-goggles
  :diminish evil-goggles-mode
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text will
  ;; be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces)

  ;; to pulse the visual hint, rather than just show and hide it (experimental):
  (setq evil-goggles-pulse t))
#+END_SRC
** undo-tree
=undo-tree= improves the emacs undo system:

Keybindings:

- =C-_= for =undo-tree-undo=
- =C-+= for =undo-tree-redo=
- =M-_= for =undo-tree-redo=

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (global-undo-tree-mode t)
  :bind ("C-+" . undo-tree-redo))
#+END_SRC
** saveplace
=saveplace= purpose is to make the point go to the last place where it was at the last time a file was opened:

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :config
  (if (version<= emacs-version "24.5")
    (setq-default save-place t)
    (save-place-mode t)))
#+END_SRC
** windmove
=windmove= lets the user move easily through windows:

Keybindings:

- =S-Left=
- =S-Right=
- =S-Up=
- =S-Down=

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config
  (setq windmove-wrap-around t)
  (windmove-default-keybindings))
#+END_SRC
** idle-highlight-mode
=idle-highlight-mode= sets an idle timer that highlights all occurences in the buffer of the word under the point:

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :config (add-hook 'prog-mode-hook (lambda () (idle-highlight-mode t))))
#+END_SRC
** compile
=compile= enhances compilation features in emacs:

#+BEGIN_SRC emacs-lisp
(use-package compile
  :config
  (setq compilation-always-kill t)
  (setq compilation-auto-jump-to-first-error t))
#+END_SRC
** smartparens
=smartparens= is a minor mode for dealing with pairs in emacs:

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config (smartparens-global-mode t)
  :diminish smartparens-mode)
#+END_SRC
** markdown-mode
=markdown-mode= is a mode to edit =*.markdown= files:

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode ("\\.markdown\\'" "\\.md\\'"))
#+END_SRC
** ws-butler-mode
=ws-butler-mode= is an unobtrusive way to trim spaces from end of line:

#+BEGIN_SRC emacs-lisp
(use-package ws-butler 
  :config (ws-butler-global-mode t)
  :diminish ws-butler-mode)
#+END_SRC
** git-gutter
=git-gutter= indicates VCS changes on the emacs gutter:

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode
  :config (global-git-gutter-mode t))
#+END_SRC
** flycheck
=flycheck= is a modern on-the-fly syntax checking extension:

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :config (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
** persistent-scratch
=persistent-scratch= makes emacs preserve the state of scratch buffers across sessions:

#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch
  :config (persistent-scratch-setup-default))
#+END_SRC
** recentf
=recentf= keeps track of recently opened files:

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 100))
#+END_SRC
** savehist
=savehist= saves minibuffer history between sessions:

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :config
  (savehist-mode t)
  (setq history-delete-duplicates t)
  ;; save additional variables
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)))
#+END_SRC
** smex
=smex= is a smarter replacement for =M-x=:

#+BEGIN_SRC emacs-lisp
(use-package smex
  :config (smex-initialize)
  :bind (("M-x" . smex)))
#+END_SRC
** ido
*** ido-mode
=ido-mode= enhances emacs completion in the minibuffer:

#+BEGIN_SRC emacs-lisp
(defun recentf-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
    (when file
      (find-file file))))

(use-package ido
  :bind ("C-x C-r" . recentf-ido-find-file)
  :config
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-show-dot-for-dired t))
#+END_SRC
*** ido-vertical-mode
=ido-vertical-mode= makes =ido-mode= display vertically:

#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :config
  (ido-vertical-mode t)
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
  (setq ido-vertical-show-count t)

  ;; make =ido-vertical-mode= prettier
  ;; https://github.com/creichert/ido-vertical-mode.el
  (setq ido-use-faces t)
  (set-face-attribute 'ido-vertical-first-match-face nil
                      :background nil
                      :foreground "orange")
  (set-face-attribute 'ido-vertical-only-match-face nil
                      :background nil
                      :foreground nil)
  (set-face-attribute 'ido-vertical-match-face nil
                      :foreground nil))
#+END_SRC
*** flx-ido
=flx-ido= provides fuzzy matching for emacs:

#+BEGIN_SRC emacs-lisp
(use-package flx-ido
  :config
  (flx-ido-mode 1)
  (setq ido-enable-flex-matching t))
#+END_SRC
*** ido-ubiquitous-mode
=ido-ubiquitous-mode= enhances emacs completion everywhere:

#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :config (ido-ubiquitous-mode t))
#+END_SRC
*** icomplete-mode
 =icomplete-mode= comes to the rescue whenever =ido= cannot be used:

#+BEGIN_SRC emacs-lisp
(use-package icomplete
  :config (icomplete-mode t))
#+END_SRC
** org-mode
=org-mode= is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system:

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")))
  (setq org-enforce-todo-dependencies t)
  (setq org-log-done t)

  ;; customize org todo faces
  (setq org-todo-keyword-faces (quote
    (("TODO" . "red")
    ("STARTED" . "yellow")
    ("DONE" . "green"))))

  ;; enable compatibility with =windmove=:
  ;; http://orgmode.org/manual/Conflicts.html
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right))
#+END_SRC
* Customizations
** backups
Inhibit all backup files.

#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t)
(setq make-backup-files nil)
(setq delete-old-versions t)
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+END_SRC
** comint
=comint= is a package that defines a general command-interpreter-in-a-buffer:

#+BEGIN_SRC emacs-lisp
(bind-keys :map comint-mode-map
           ("<up>" . comint-previous-input)
           ("<down>" . comint-next-input))
#+END_SRC
** uniquify
=uniquify= overrides Emacsâ€™ default mechanism for making buffer names unique:

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-separator "/")
#+END_SRC
** initialization messages
Suppress all initialization messages:

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+END_SRC
** miscellaneous tweaks
A bag for all non-categorized tweaks:

#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines t)
(setq-default fill-column 80)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
(require 'iso-transl)
(setq save-interprogram-paste-before-kill t)
(setq select-enable-primary t)
(setq vc-follow-symlinks t)
#+END_SRC
** minibuffer
Provide better defaults for the minibuffer:

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(setq resize-mini-windows t)
(setq echo-keystrokes 0.1)
#+END_SRC
** modeline
Improve modeline information:

#+BEGIN_SRC emacs-lisp
(column-number-mode t)
(which-function-mode t)
#+END_SRC
** user-defined keybindings
Add personal keybindings:

#+BEGIN_SRC emacs-lisp
(bind-key "C-;" 'comment-dwim)
(bind-key "RET" 'newline-and-indent)
#+END_SRC
